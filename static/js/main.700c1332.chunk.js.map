{"version":3,"sources":["store.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["UPDATE_QUERY_ACTION_TYPE","UPDATE_MIN_SAUSAGES_ACTION_TYPE","UPDATE_MAX_SAUSAGES_ACTION_TYPE","UPDATE_MIN_RUFFALOS_ACTION_TYPE","UPDATE_MAX_RUFFALOS_ACTION_TYPE","UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE","updateFilter","type","value","updateQueryFilter","updateMinSausagesFilter","updateMaxSausagesFilter","updateMinRuffalosFilter","updateMaxRuffalosFilter","initialFilterState","queryState","queryString","window","location","search","console","log","query","minSausages","maxSausages","minRuffalos","maxRuffalos","rootReducer","combineReducers","state","action","field","store","createStore","applyMiddleware","storeAPI","next","result","params","URLSearchParams","getState","filters","history","pushState","document","title","pathname","ScoreInput","props","max","min","SearchBar","useSelector","dispatch","useDispatch","dispathValueChangeEventFor","actionGenerator","callback","val","e","target","placeholder","onChange","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wQAGMA,EAA2B,uBAC3BC,EAAkC,8BAClCC,EAAkC,8BAClCC,EAAkC,8BAClCC,EAAkC,8BAClCC,GAAyC,mBAC1CL,EAA2B,SADe,cAE1CC,EAAkC,eAFQ,cAG1CC,EAAkC,eAHQ,cAI1CC,EAAkC,eAJQ,cAK1CC,EAAkC,eALQ,GAQzCE,EAAe,SAACC,GAAD,OAAU,SAACC,GAAD,MAAW,CACtCD,OACAC,WAGSC,EAAoBH,EAAaN,GACjCU,EAA0BJ,EAAaL,GACvCU,EAA0BL,EAAaJ,GACvCU,EAA0BN,EAAaH,GACvCU,EAA0BP,EAAaF,GAE9CU,EAAsB,WACxB,IAAMC,EAAaC,QAAkBC,OAAOC,SAASC,QAErD,OADAC,QAAQC,IAAIJ,OAAOC,SAASC,OAAQJ,GAC7B,2BACA,CACCO,MAAO,GACPC,YAAa,EACbC,YAAa,EACbC,YAAa,EACbC,YAAa,IAEdX,GAXiB,GAuB5B,IAAMY,EAAcC,YAAgB,CAChC,QATJ,WAA4D,IAArCC,EAAoC,uDAA5Bf,EAAoBgB,EAAQ,uCACjDC,EAAQ1B,EAA0CyB,EAAOvB,MAC/D,OAAIwB,EACO,2BAAKF,GAAZ,kBAAoBE,EAAQD,EAAOtB,QAEhCqB,KAcEG,EAAQC,YAAYN,EAAaO,aAPd,SAAAC,GAAQ,OAAI,SAAAC,GAAI,OAAI,SAAAN,GAChD,IAAIO,EAASD,EAAKN,GACZQ,EAAS,IAAIC,gBAAgBvB,YAAsBmB,EAASK,WAAWC,UAE7E,OADAxB,OAAOyB,QAAQC,UAAU,GAAIC,SAASC,MAAtC,UAAgD5B,OAAOC,SAAS4B,SAAhE,YAA4ER,IACrED,Q,OChDLU,EAAa,SAACC,GAAD,OAAY,mCAAOzC,KAAK,SAAS0C,IAAI,IAAIC,IAAI,KAAQF,KAEzD,SAASG,IACpB,IAAMV,EAAUW,aAAY,SAAAvB,GAAK,OAAIA,EAAMY,WACrCY,EAAWC,cAEXC,EAA6B,SAACC,GAAD,OADVC,EAC+C,SAAAC,GAAG,OAAIL,EAASG,EAAgBE,KADlE,SAAAC,GAAC,OAAIF,EAASE,EAAEC,OAAOpD,QAArC,IAACiD,GAGzB,OACI,gCACI,uBAAOlD,KAAK,OAAOsD,YAAY,SAASrD,MAAOiC,EAAQnB,MAAOwC,SAAUP,EAA2B9C,KADvG,aAEc,cAAC,EAAD,CAAYD,MAAOiC,EAAQlB,YAAauC,SAAUP,EAA2B7C,KAF3F,MAGI,cAAC,EAAD,CAAYF,MAAOiC,EAAQjB,YAAasC,SAAUP,EAA2B5C,KAHjF,aAIc,cAAC,EAAD,CAAYH,MAAOiC,EAAQhB,YAAaqC,SAAUP,EAA2B3C,KAJ3F,MAKI,cAAC,EAAD,CAAYJ,MAAOiC,EAAQf,YAAaoC,SAAUP,EAA2B1C,QCb1EkD,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACb,EAAD,OCMSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU5C,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASiC,eAAe,SAM1BZ,M","file":"static/js/main.700c1332.chunk.js","sourcesContent":["import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport * as queryString from 'query-string'\n\nconst UPDATE_QUERY_ACTION_TYPE = \"filters/update-query\"\nconst UPDATE_MIN_SAUSAGES_ACTION_TYPE = \"filters/update-min-sausages\"\nconst UPDATE_MAX_SAUSAGES_ACTION_TYPE = \"filters/update-max-sausages\"\nconst UPDATE_MIN_RUFFALOS_ACTION_TYPE = \"filters/update-min-ruffalos\"\nconst UPDATE_MAX_RUFFALOS_ACTION_TYPE = \"filters/update-max-ruffalos\"\nconst UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE = {\n    [UPDATE_QUERY_ACTION_TYPE]: 'query',\n    [UPDATE_MIN_SAUSAGES_ACTION_TYPE]: 'minSausages',\n    [UPDATE_MAX_SAUSAGES_ACTION_TYPE]: 'maxSausages',\n    [UPDATE_MIN_RUFFALOS_ACTION_TYPE]: 'minRuffalos',\n    [UPDATE_MAX_RUFFALOS_ACTION_TYPE]: 'maxRuffalos',\n}\n\nconst updateFilter = (type) => (value) =>({\n    type,\n    value\n})\n\nexport const updateQueryFilter = updateFilter(UPDATE_QUERY_ACTION_TYPE)\nexport const updateMinSausagesFilter = updateFilter(UPDATE_MIN_SAUSAGES_ACTION_TYPE)\nexport const updateMaxSausagesFilter = updateFilter(UPDATE_MAX_SAUSAGES_ACTION_TYPE)\nexport const updateMinRuffalosFilter = updateFilter(UPDATE_MIN_RUFFALOS_ACTION_TYPE)\nexport const updateMaxRuffalosFilter = updateFilter(UPDATE_MAX_RUFFALOS_ACTION_TYPE)\n\nconst initialFilterState = (() => {\n    const queryState = queryString.parse(window.location.search)\n    console.log(window.location.search, queryState)\n    return {\n        ...{\n            query: '',\n            minSausages: 0,\n            maxSausages: 5,\n            minRuffalos: 0,\n            maxRuffalos: 5,\n        }, \n        ...queryState\n    }\n})()\n\nfunction filterReducer(state = initialFilterState, action) {\n    const field = UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE[action.type];\n    if (field) {\n        return { ...state, [field]: action.value }\n    }\n    return state\n}\n\nconst rootReducer = combineReducers({\n    'filters': filterReducer\n})\n\nconst historyUpdateMiddleware = storeAPI => next => action => {\n    let result = next(action)\n    const params = new URLSearchParams(queryString.stringify(storeAPI.getState().filters))\n    window.history.pushState({}, document.title, `${window.location.pathname}?${params}`)\n    return result\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(historyUpdateMiddleware))","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { \n    updateQueryFilter, \n    updateMinSausagesFilter, \n    updateMaxSausagesFilter, \n    updateMinRuffalosFilter, \n    updateMaxRuffalosFilter \n} from '../store'\n\nconst ScoreInput = (props) => (<input type=\"number\" max=\"5\" min=\"0\" {...props} />)\n\nexport default function SearchBar() {\n    const filters = useSelector(state => state.filters)\n    const dispatch = useDispatch()\n    const withUpdateEvent = (callback) => e => callback(e.target.value)\n    const dispathValueChangeEventFor = (actionGenerator) => withUpdateEvent(val => dispatch(actionGenerator(val)))\n\n    return (\n        <div>\n            <input type=\"text\" placeholder=\"Search\" value={filters.query} onChange={dispathValueChangeEventFor(updateQueryFilter)} />\n            Sausages: <ScoreInput value={filters.minSausages} onChange={dispathValueChangeEventFor(updateMinSausagesFilter)} /> to \n            <ScoreInput value={filters.maxSausages} onChange={dispathValueChangeEventFor(updateMaxSausagesFilter)} />\n            Ruffalos: <ScoreInput value={filters.minRuffalos} onChange={dispathValueChangeEventFor(updateMinRuffalosFilter)} /> to \n            <ScoreInput value={filters.maxRuffalos} onChange={dispathValueChangeEventFor(updateMaxRuffalosFilter)} />\n\n        </div>\n    )\n}","import './App.css';\nimport SearchBar from './components/SearchBar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}