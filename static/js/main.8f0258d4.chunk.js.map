{"version":3,"sources":["store.js","reportWebVitals.js","components/SearchBar.js","components/SearchResults.js","components/App.js","index.js"],"names":["min","max","parseScore","str","Math","parseInt","UPDATE_QUERY_ACTION_TYPE","UPDATE_MIN_SAUSAGES_ACTION_TYPE","UPDATE_MAX_SAUSAGES_ACTION_TYPE","UPDATE_MIN_RUFFALOS_ACTION_TYPE","UPDATE_MAX_RUFFALOS_ACTION_TYPE","UPDATE_INCLUDE_SAUSAGE_DISQUALIFIED_ACTION_TYPE","UPDATE_INCLUDE_WILL_IT_BLOW_DISQUALIFIED_ACTION_TYPE","UPDATE_INCLUDE_MISSING_WILL_IT_BLOW_ACTION_TYPE","RESET_FILTERS_ACTION_TYPE","UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE","field","defaultValue","converter","Boolean","updateFilter","type","value","updateQueryFilter","updateMinSausagesFilter","updateMaxSausagesFilter","updateMinRuffalosFilter","updateMaxRuffalosFilter","updateIncludeSausageDisqualifiedFilter","updateIncludeWillItBlowDisqualifiedFilter","updateIncludeMissingWillItBlowFilter","resetFilters","defaultFilterState","Object","fromEntries","values","map","initialFilterState","queryState","queryString","window","location","search","initialState","fieldDef","DATASET_LOAD_ACTION_TYPE","rootReducer","combineReducers","state","action","actionType","val","loaded","store","createStore","composeWithDevTools","applyMiddleware","storeAPI","next","result","params","URLSearchParams","getState","filters","history","pushState","document","title","pathname","fetch","process","then","res","json","dispatch","removeSpecialChars","query","replace","selectFilters","selectResults","dataset","filter","sausage","name","toLowerCase","includes","tags","includeSausageDisqualified","sausages","minSausages","maxSausages","includeWillItBlowDisqualified","includeMissingWillItBlow","ruffalos","minRuffalos","maxRuffalos","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ButtonWithPopup","renderButtonChildren","renderPopupChildren","useState","open","setOpen","handleClose","IconButton","aria-label","color","onClick","Dialog","onClose","aria-labelledby","InfoButton","close","DialogTitle","DialogContent","Typography","href","DialogActions","Button","ShareButton","nativeShare","setNativeShare","useEffect","navigator","share","showCopiedBanner","setShowCopiedBanner","url","catch","console","error","log","copy","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","DownloadButton","results","useSelector","download","JSON","stringify","useStyles","makeStyles","theme","logo","border","grow","flexGrow","paddingLeft","display","breakpoints","up","position","borderRadius","shape","borderRadContainer","searchIcon","padding","spacing","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","create","width","filterBox","PrimarySearchAppBar","classes","useDispatch","withUpdateEvent","attr","callback","e","target","dispathValueChangeEventFor","actionGenerator","dispathCheckboxChangeEventFor","className","AppBar","Toolbar","Avatar","alt","src","variant","noWrap","InputBase","placeholder","root","input","inputProps","onChange","FormGroup","column","TextField","label","InputLabelProps","shrink","FormControlLabel","control","Checkbox","checked","table","minWidth","tableRow","ratingComponentGenerator","img","rating","rest","Array","fill","round","style","objectFit","objectPosition","SausageRating","RuffaloRating","SearchResults","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","scope","App","CssBaseline","Container","renderApp","render","StrictMode","getElementById","gtag","dataLayer","push","arguments","Date"],"mappings":"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","file":"static/js/main.8f0258d4.chunk.js","sourcesContent":["import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport * as queryString from 'query-string'\nimport { composeWithDevTools } from \"redux-devtools-extension\"\n\nconst parseIntInRange = (min, max) => (str) => Math.min(max, Math.max(min, parseInt(str)))\nconst parseScore = parseIntInRange(0, 5)\n\nconst UPDATE_QUERY_ACTION_TYPE = \"filters/update-query\"\nconst UPDATE_MIN_SAUSAGES_ACTION_TYPE = \"filters/update-min-sausages\"\nconst UPDATE_MAX_SAUSAGES_ACTION_TYPE = \"filters/update-max-sausages\"\nconst UPDATE_MIN_RUFFALOS_ACTION_TYPE = \"filters/update-min-ruffalos\"\nconst UPDATE_MAX_RUFFALOS_ACTION_TYPE = \"filters/update-max-ruffalos\"\nconst UPDATE_INCLUDE_SAUSAGE_DISQUALIFIED_ACTION_TYPE = \"filters/update-sausage-disqualified\"\nconst UPDATE_INCLUDE_WILL_IT_BLOW_DISQUALIFIED_ACTION_TYPE = \"filters/update-will-it-blow-disqualified\"\nconst UPDATE_INCLUDE_MISSING_WILL_IT_BLOW_ACTION_TYPE = \"filters/update-missing-will-it-blow-disqualified\"\nconst RESET_FILTERS_ACTION_TYPE = \"filters/reset\"\nconst UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE = {\n    [UPDATE_QUERY_ACTION_TYPE]: {\n        field: 'query',\n        defaultValue: ''\n    },\n    [UPDATE_MIN_SAUSAGES_ACTION_TYPE]: {\n        field: 'minSausages',\n        converter: parseScore,\n        defaultValue: 0\n    },\n    [UPDATE_MAX_SAUSAGES_ACTION_TYPE]: {\n        field: 'maxSausages',\n        converter: parseScore,\n        defaultValue: 5\n    },\n    [UPDATE_MIN_RUFFALOS_ACTION_TYPE]: {\n        field: 'minRuffalos',\n        converter: parseScore,\n        defaultValue: 0\n    },\n    [UPDATE_MAX_RUFFALOS_ACTION_TYPE]: {\n        field: 'maxRuffalos',\n        converter: parseScore,\n        defaultValue: 5\n    },\n    [UPDATE_INCLUDE_SAUSAGE_DISQUALIFIED_ACTION_TYPE]: {\n        field: 'includeSausageDisqualified',\n        converter: Boolean,\n        defaultValue: true\n    },\n    [UPDATE_INCLUDE_WILL_IT_BLOW_DISQUALIFIED_ACTION_TYPE]: {\n        field: 'includeWillItBlowDisqualified',\n        converter: Boolean,\n        defaultValue: true\n    },\n    [UPDATE_INCLUDE_MISSING_WILL_IT_BLOW_ACTION_TYPE]: {\n        field: 'includeMissingWillItBlow',\n        converter: Boolean,\n        defaultValue: true\n    }\n}\n\nconst updateFilter = (type) => (value) =>({\n    type,\n    value\n})\n\nexport const updateQueryFilter = updateFilter(UPDATE_QUERY_ACTION_TYPE)\nexport const updateMinSausagesFilter = updateFilter(UPDATE_MIN_SAUSAGES_ACTION_TYPE)\nexport const updateMaxSausagesFilter = updateFilter(UPDATE_MAX_SAUSAGES_ACTION_TYPE)\nexport const updateMinRuffalosFilter = updateFilter(UPDATE_MIN_RUFFALOS_ACTION_TYPE)\nexport const updateMaxRuffalosFilter = updateFilter(UPDATE_MAX_RUFFALOS_ACTION_TYPE)\nexport const updateIncludeSausageDisqualifiedFilter = updateFilter(UPDATE_INCLUDE_SAUSAGE_DISQUALIFIED_ACTION_TYPE)\nexport const updateIncludeWillItBlowDisqualifiedFilter = updateFilter(UPDATE_INCLUDE_WILL_IT_BLOW_DISQUALIFIED_ACTION_TYPE)\nexport const updateIncludeMissingWillItBlowFilter = updateFilter(UPDATE_INCLUDE_MISSING_WILL_IT_BLOW_ACTION_TYPE)\nexport const resetFilters = { type: RESET_FILTERS_ACTION_TYPE }\n\nconst defaultFilterState = (() => Object.fromEntries(\n    Object.values(UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE)\n    .map(({ field, defaultValue }) => [ field, defaultValue ])))()\n\nconst initialFilterState = (() => {\n    const queryState = queryString.parse(window.location.search)\n    const initialState = {\n        ...defaultFilterState, \n        ...queryState\n    }\n\n    for(const fieldDef of Object.values(UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE)) {\n        if (! fieldDef.converter) {\n            continue\n        }\n        initialState[fieldDef.field] = fieldDef.converter(initialState[fieldDef.field])\n    }\n\n    return initialState\n})()\n\nfunction filterReducer(state = initialFilterState, action) {\n    const actionType = action.type\n    if (actionType === RESET_FILTERS_ACTION_TYPE) {\n        return defaultFilterState\n    }\n    const fieldDef = UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE[actionType];\n    if (fieldDef) {\n        return { ...state, [fieldDef.field]: (fieldDef.converter || (val => val))(action.value) }\n    }\n    return state\n}\n\nconst DATASET_LOAD_ACTION_TYPE = \"dataset/load\"\n\nfunction datasetReducer(state = {\n    loaded: false,\n    values: []\n}, action) {\n    switch (action.type) {\n        case DATASET_LOAD_ACTION_TYPE:\n            return {\n                loaded: true,\n                values: action.value\n            }\n        default:\n            return state\n    }\n}\n\nconst rootReducer = combineReducers({\n    'filters': filterReducer,\n    'dataset': datasetReducer\n})\n\nconst historyUpdateMiddleware = storeAPI => next => action => {\n    let result = next(action)\n    const params = new URLSearchParams(queryString.stringify(storeAPI.getState().filters))\n    window.history.pushState({}, document.title, `${window.location.pathname}?${params}`)\n    return result\n}\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(historyUpdateMiddleware)))\nfetch(process.env.PUBLIC_URL + '/dataset.json').then(res => res.json()).then(json => store.dispatch({\n    type: DATASET_LOAD_ACTION_TYPE,\n    value: json\n}))\n\nconst removeSpecialChars = (query) => query.replace(/\\W/g, '')\n\nexport const selectFilters = state => state.filters\nexport const selectResults = state => state.dataset.values\n    .filter(sausage => removeSpecialChars(sausage.name.toLowerCase()).includes(removeSpecialChars(state.filters.query.toLowerCase())))\n    .filter(sausage => {\n        if (sausage.tags && sausage.tags.includes(\"sausage-disqualified\")) return state.filters.includeSausageDisqualified\n        return sausage.sausages >= state.filters.minSausages && sausage.sausages <= state.filters.maxSausages\n    })\n    .filter(sausage => {\n        if (sausage.tags && sausage.tags.includes(\"will-it-blow-disqualified\")) return state.filters.includeWillItBlowDisqualified\n        if (state.filters.includeMissingWillItBlow && (! sausage.ruffalos)) return true\n        return sausage.ruffalos >= state.filters.minRuffalos && sausage.ruffalos <= state.filters.maxRuffalos\n    })\n\n// TODO if this gets more complex then add https://redux.js.org/recipes/configuring-your-store#simplifying-setup-with-redux-toolkit","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n    updateQueryFilter,\n    updateMinSausagesFilter,\n    updateMaxSausagesFilter,\n    updateMinRuffalosFilter,\n    updateMaxRuffalosFilter,\n    updateIncludeSausageDisqualifiedFilter,\n    updateIncludeWillItBlowDisqualifiedFilter,\n    updateIncludeMissingWillItBlowFilter,\n    resetFilters,\n    selectFilters,\n    selectResults\n} from '../store'\nimport TextField from '@material-ui/core/TextField';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ShareIcon from '@material-ui/icons/Share';\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport copy from 'copy-to-clipboard';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport * as download from 'js-file-download'\n\nfunction ButtonWithPopup({ renderButtonChildren, renderPopupChildren }) {\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    return (\n        <>\n            <IconButton aria-label=\"delete\" color=\"inherit\" onClick={handleClickOpen}>\n                {renderButtonChildren()}\n            </IconButton>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"draggable-dialog-title\"\n            >\n                {renderPopupChildren(handleClose)}\n            </Dialog>\n        </>\n    )\n}\n\nconst InfoButton = () => (\n    <ButtonWithPopup\n        renderButtonChildren={() => <InfoIcon />}\n        renderPopupChildren={close => (\n            <>\n            <DialogTitle>Info</DialogTitle>\n            <DialogContent>\n                <Typography>\n                    Any kind of contribution is welcome, so feel free to reach out to us on <a href=\"https://github.com/TheGrizzlyDev/Ordinary-Sausearch\">Github</a>\n                </Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={close} color=\"primary\">\n                    Close\n                </Button>\n            </DialogActions>\n            </>\n        )}\n    />\n)\n\nfunction ShareButton() {\n    const [nativeShare, setNativeShare] = useState(false)\n    useEffect(() => {\n        setNativeShare(!!window.navigator.share)\n    }, [])\n    const [showCopiedBanner, setShowCopiedBanner] = useState(false)\n\n    const handleClickOpen = () => {\n        const url = window.location.href\n        if (nativeShare) {\n            navigator.share({\n                title: 'Ordinary Sausearch',\n                url\n            }).catch(console.error)\n            return\n        }\n        console.log(url)\n        copy(url)\n        setShowCopiedBanner(true)\n    }\n\n    return (\n            <IconButton aria-label=\"delete\" color=\"inherit\" onClick={handleClickOpen}>\n                <ShareIcon />\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right',\n                    }}\n                    open={showCopiedBanner}\n                    autoHideDuration={4000}\n                    onClose={() => setShowCopiedBanner(false)}\n                    message=\"URL copied to your clipboard\"\n                />\n            </IconButton>\n    )\n\n}\n\nfunction DownloadButton() {\n    const results = useSelector(selectResults)\n    const [showCopiedBanner, setShowCopiedBanner] = useState(false)\n\n    const handleClickOpen = () => {\n        download(JSON.stringify(results), 'sausages.json')\n        setShowCopiedBanner(true)\n    }\n\n    return (\n            <IconButton aria-label=\"delete\" color=\"inherit\" onClick={handleClickOpen}>\n                <DownloadIcon />\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right',\n                    }}\n                    open={showCopiedBanner}\n                    autoHideDuration={4000}\n                    onClose={() => setShowCopiedBanner(false)}\n                    message=\"Search results downloaded\"\n                />\n            </IconButton>\n    )\n\n}\n\nconst useStyles = makeStyles((theme) => ({\n    logo: {\n        border: '2px solid #20202050'\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    title: {\n        paddingLeft: '1em',\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadContainer\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n            width: '20ch',\n        },\n    },\n    padding: {\n        height: `calc(56px + ${theme.spacing(2)}px)`\n    },\n    filterBox: {\n        padding: '20px',\n    }\n}));\n\nexport default function PrimarySearchAppBar() {\n    const classes = useStyles();\n    const filters = useSelector(selectFilters)\n    const dispatch = useDispatch()\n    const withUpdateEvent = (attr, callback) => e => callback(e.target[attr])\n    const dispathValueChangeEventFor = (actionGenerator, attr = 'value') => withUpdateEvent(attr, val => dispatch(actionGenerator(val)))\n    const dispathCheckboxChangeEventFor = (actionGenerator) => dispathValueChangeEventFor(actionGenerator, 'checked')\n\n    return (\n        <div className={classes.grow}>\n            <div className={classes.padding} />\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Avatar className={classes.logo} alt=\"Ordinary Sausage logo\" src={process.env.PUBLIC_URL + \"/logo.png\"} />\n\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        Ordinary Sausearch\n                    </Typography>\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{ 'aria-label': 'search' }}\n                            value={filters.query}\n                            onChange={dispathValueChangeEventFor(updateQueryFilter)}\n                        />\n                    </div>\n                    <ButtonWithPopup\n                        renderButtonChildren={() => (<FilterListIcon />)}\n                        renderPopupChildren={close => (\n                            <div classes={classes.filterBox}>\n                                <DialogTitle>Advanced filters</DialogTitle>\n                                <DialogContent>\n                                    <FormGroup column>\n                                        <TextField\n                                            label=\"Min sausage score\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            value={filters.minSausages}\n                                            onChange={dispathValueChangeEventFor(updateMinSausagesFilter)}\n                                        />\n                                        <TextField\n                                            label=\"Max sausage score\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            value={filters.maxSausages}\n                                            onChange={dispathValueChangeEventFor(updateMaxSausagesFilter)}\n                                        />\n                                        <TextField\n                                            label=\"Min Ruffalos score\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            value={filters.minRuffalos}\n                                            onChange={dispathValueChangeEventFor(updateMinRuffalosFilter)}\n                                        />\n                                        <TextField\n                                            label=\"Max Ruffalos score\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            value={filters.maxRuffalos}\n                                            onChange={dispathValueChangeEventFor(updateMaxRuffalosFilter)}\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={filters.includeSausageDisqualified}\n                                                    onChange={dispathCheckboxChangeEventFor(updateIncludeSausageDisqualifiedFilter)}\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label=\"Show disqualified sausages\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={filters.includeWillItBlowDisqualified}\n                                                    onChange={dispathCheckboxChangeEventFor(updateIncludeWillItBlowDisqualifiedFilter)}\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label=\"Show disqualified 'Will it blow?'\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={filters.includeMissingWillItBlow}\n                                                    onChange={dispathCheckboxChangeEventFor(updateIncludeMissingWillItBlowFilter)}\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label=\"Show missing 'Will it blow?'\"\n                                        />\n                                    </FormGroup>\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={() => {\n                                        dispatch(resetFilters)\n                                        close()\n                                    }} color=\"primary\">\n                                        Reset\n                                    </Button>\n                                    <Button onClick={close} color=\"primary\">\n                                        Close\n                                    </Button>\n                                </DialogActions>\n                            </div>)}\n                    />\n                    <div className={classes.grow} />\n                    <ShareButton />\n                    <DownloadButton />\n                    <InfoButton />\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import { useSelector } from 'react-redux'\nimport { selectResults } from '../store'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n    tableRow: {\n        height: 64,\n    }\n});\n\nconst ratingComponentGenerator = (img) => ({rating}) => {\n    const iconSize = 24\n    const rest = rating % 1\n    return (\n        <span>\n            {(!! rating) && new Array(parseInt(rating)).fill().map(() => <img alt=\"\" width={iconSize} src={img}/>) }\n            {(rest > 0) && <img alt=\"\" width={iconSize} height={Math.round(iconSize * rest)} src={img} style={{\n                objectFit: 'cover',\n                objectPosition: '0% 100%'\n            }}/>}\n        </span>\n    )\n}\n\nconst SausageRating = ratingComponentGenerator(`${process.env.PUBLIC_URL}/sausage.png`)\n\nconst RuffaloRating = ratingComponentGenerator(`${process.env.PUBLIC_URL}/ruffalo.png`)\n\nexport default function SearchResults() {\n    const results = useSelector(selectResults)\n    const classes = useStyles();\n\n    return (\n\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell align=\"right\">Sausages</TableCell>\n                        <TableCell align=\"right\">Ruffalos</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {results.map((row) => (\n                        <TableRow className={classes.tableRow} key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </TableCell>\n                            <TableCell align=\"right\">\n                                <SausageRating rating={row.sausages}/>\n                            </TableCell>\n                            <TableCell align=\"right\">\n                                <RuffaloRating rating={row.ruffalos}/>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","import './App.css';\nimport SearchBar from './SearchBar'\nimport SearchResults from './SearchResults'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  return (\n    <>\n    <CssBaseline />\n    <SearchBar />\n    <Container>\n      <SearchResults />\n    </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nconst renderApp = () => render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nconst isDev = process.env.NODE_ENV !== 'production'\n\nif (isDev && module.hot) {\n  module.hot.accept('./components/App', renderApp)\n}\n\nif (! isDev) {\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){window.dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'G-8S3Z9M64CQ');\n}\n\nrenderApp()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals()\n"],"sourceRoot":""}