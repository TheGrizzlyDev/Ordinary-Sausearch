{"version":3,"sources":["store.js","components/SearchBar.js","components/SearchResults.js","components/App.js","reportWebVitals.js","index.js"],"names":["min","max","parseScore","str","Math","parseInt","UPDATE_QUERY_ACTION_TYPE","UPDATE_MIN_SAUSAGES_ACTION_TYPE","UPDATE_MAX_SAUSAGES_ACTION_TYPE","UPDATE_MIN_RUFFALOS_ACTION_TYPE","UPDATE_MAX_RUFFALOS_ACTION_TYPE","UPDATE_INCLUDE_SAUSAGE_DISQUALIFIED_ACTION_TYPE","UPDATE_INCLUDE_WILL_IT_BLOW_DISQUALIFIED_ACTION_TYPE","UPDATE_INCLUDE_MISSING_WILL_IT_BLOW_ACTION_TYPE","RESET_FILTERS_ACTION_TYPE","UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE","field","defaultValue","converter","Boolean","updateFilter","type","value","updateQueryFilter","updateMinSausagesFilter","updateMaxSausagesFilter","updateMinRuffalosFilter","updateMaxRuffalosFilter","updateIncludeSausageDisqualifiedFilter","updateIncludeWillItBlowDisqualifiedFilter","updateIncludeMissingWillItBlowFilter","resetFilters","defaultFilterState","Object","fromEntries","values","map","initialFilterState","queryState","queryString","window","location","search","initialState","fieldDef","DATASET_LOAD_ACTION_TYPE","rootReducer","combineReducers","state","action","actionType","val","loaded","store","createStore","composeWithDevTools","applyMiddleware","storeAPI","next","result","params","URLSearchParams","getState","filters","history","pushState","document","title","pathname","fetch","process","then","res","json","dispatch","selectFilters","selectResults","dataset","filter","sausage","name","toLowerCase","includes","query","tags","includeSausageDisqualified","sausages","minSausages","maxSausages","includeWillItBlowDisqualified","includeMissingWillItBlow","ruffalos","minRuffalos","maxRuffalos","ButtonWithPopup","renderButtonChildren","renderPopupChildren","React","useState","open","setOpen","handleClose","IconButton","aria-label","color","onClick","Dialog","onClose","aria-labelledby","useStyles","makeStyles","theme","logo","border","grow","flexGrow","paddingLeft","display","breakpoints","up","position","borderRadius","shape","borderRadContainer","searchIcon","padding","spacing","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","create","width","filterBox","PrimarySearchAppBar","classes","useSelector","useDispatch","withUpdateEvent","attr","callback","e","target","dispathValueChangeEventFor","actionGenerator","dispathCheckboxChangeEventFor","className","AppBar","Toolbar","Avatar","alt","src","Typography","variant","noWrap","InputBase","placeholder","root","input","inputProps","onChange","close","DialogTitle","DialogContent","FormGroup","column","TextField","label","InputLabelProps","shrink","FormControlLabel","control","Checkbox","checked","DialogActions","Button","table","minWidth","SearchResults","results","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","scope","App","CssBaseline","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6d7cc4ed.chunk.js","sourcesContent":["import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport * as queryString from 'query-string'\nimport { composeWithDevTools } from \"redux-devtools-extension\"\n\nconst parseIntInRange = (min, max) => (str) => Math.min(max, Math.max(min, parseInt(str)))\nconst parseScore = parseIntInRange(0, 5)\n\nconst UPDATE_QUERY_ACTION_TYPE = \"filters/update-query\"\nconst UPDATE_MIN_SAUSAGES_ACTION_TYPE = \"filters/update-min-sausages\"\nconst UPDATE_MAX_SAUSAGES_ACTION_TYPE = \"filters/update-max-sausages\"\nconst UPDATE_MIN_RUFFALOS_ACTION_TYPE = \"filters/update-min-ruffalos\"\nconst UPDATE_MAX_RUFFALOS_ACTION_TYPE = \"filters/update-max-ruffalos\"\nconst UPDATE_INCLUDE_SAUSAGE_DISQUALIFIED_ACTION_TYPE = \"filters/update-sausage-disqualified\"\nconst UPDATE_INCLUDE_WILL_IT_BLOW_DISQUALIFIED_ACTION_TYPE = \"filters/update-will-it-blow-disqualified\"\nconst UPDATE_INCLUDE_MISSING_WILL_IT_BLOW_ACTION_TYPE = \"filters/update-missing-will-it-blow-disqualified\"\nconst RESET_FILTERS_ACTION_TYPE = \"filters/reset\"\nconst UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE = {\n    [UPDATE_QUERY_ACTION_TYPE]: {\n        field: 'query',\n        defaultValue: ''\n    },\n    [UPDATE_MIN_SAUSAGES_ACTION_TYPE]: {\n        field: 'minSausages',\n        converter: parseScore,\n        defaultValue: 0\n    },\n    [UPDATE_MAX_SAUSAGES_ACTION_TYPE]: {\n        field: 'maxSausages',\n        converter: parseScore,\n        defaultValue: 5\n    },\n    [UPDATE_MIN_RUFFALOS_ACTION_TYPE]: {\n        field: 'minRuffalos',\n        converter: parseScore,\n        defaultValue: 0\n    },\n    [UPDATE_MAX_RUFFALOS_ACTION_TYPE]: {\n        field: 'maxRuffalos',\n        converter: parseScore,\n        defaultValue: 5\n    },\n    [UPDATE_INCLUDE_SAUSAGE_DISQUALIFIED_ACTION_TYPE]: {\n        field: 'includeSausageDisqualified',\n        converter: Boolean,\n        defaultValue: true\n    },\n    [UPDATE_INCLUDE_WILL_IT_BLOW_DISQUALIFIED_ACTION_TYPE]: {\n        field: 'includeWillItBlowDisqualified',\n        converter: Boolean,\n        defaultValue: true\n    },\n    [UPDATE_INCLUDE_MISSING_WILL_IT_BLOW_ACTION_TYPE]: {\n        field: 'includeMissingWillItBlow',\n        converter: Boolean,\n        defaultValue: true\n    }\n}\n\nconst updateFilter = (type) => (value) =>({\n    type,\n    value\n})\n\nexport const updateQueryFilter = updateFilter(UPDATE_QUERY_ACTION_TYPE)\nexport const updateMinSausagesFilter = updateFilter(UPDATE_MIN_SAUSAGES_ACTION_TYPE)\nexport const updateMaxSausagesFilter = updateFilter(UPDATE_MAX_SAUSAGES_ACTION_TYPE)\nexport const updateMinRuffalosFilter = updateFilter(UPDATE_MIN_RUFFALOS_ACTION_TYPE)\nexport const updateMaxRuffalosFilter = updateFilter(UPDATE_MAX_RUFFALOS_ACTION_TYPE)\nexport const updateIncludeSausageDisqualifiedFilter = updateFilter(UPDATE_INCLUDE_SAUSAGE_DISQUALIFIED_ACTION_TYPE)\nexport const updateIncludeWillItBlowDisqualifiedFilter = updateFilter(UPDATE_INCLUDE_WILL_IT_BLOW_DISQUALIFIED_ACTION_TYPE)\nexport const updateIncludeMissingWillItBlowFilter = updateFilter(UPDATE_INCLUDE_MISSING_WILL_IT_BLOW_ACTION_TYPE)\nexport const resetFilters = { type: RESET_FILTERS_ACTION_TYPE }\n\nconst defaultFilterState = (() => Object.fromEntries(\n    Object.values(UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE)\n    .map(({ field, defaultValue }) => [ field, defaultValue ])))()\n\nconst initialFilterState = (() => {\n    const queryState = queryString.parse(window.location.search)\n    const initialState = {\n        ...defaultFilterState, \n        ...queryState\n    }\n\n    for(const fieldDef of Object.values(UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE)) {\n        if (! fieldDef.converter) {\n            continue\n        }\n        initialState[fieldDef.field] = fieldDef.converter(initialState[fieldDef.field])\n    }\n\n    return initialState\n})()\n\nfunction filterReducer(state = initialFilterState, action) {\n    const actionType = action.type\n    if (actionType === RESET_FILTERS_ACTION_TYPE) {\n        return defaultFilterState\n    }\n    const fieldDef = UPDATE_FILTERS_ACTION_TYPES_AND_ATTRIBUTE[actionType];\n    if (fieldDef) {\n        return { ...state, [fieldDef.field]: (fieldDef.converter || (val => val))(action.value) }\n    }\n    return state\n}\n\nconst DATASET_LOAD_ACTION_TYPE = \"dataset/load\"\n\nfunction datasetReducer(state = {\n    loaded: false,\n    values: []\n}, action) {\n    switch (action.type) {\n        case DATASET_LOAD_ACTION_TYPE:\n            return {\n                loaded: true,\n                values: action.value\n            }\n        default:\n            return state\n    }\n}\n\nconst rootReducer = combineReducers({\n    'filters': filterReducer,\n    'dataset': datasetReducer\n})\n\nconst historyUpdateMiddleware = storeAPI => next => action => {\n    let result = next(action)\n    const params = new URLSearchParams(queryString.stringify(storeAPI.getState().filters))\n    window.history.pushState({}, document.title, `${window.location.pathname}?${params}`)\n    return result\n}\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(historyUpdateMiddleware)))\nfetch(process.env.PUBLIC_URL + '/dataset.json').then(res => res.json()).then(json => store.dispatch({\n    type: DATASET_LOAD_ACTION_TYPE,\n    value: json\n}))\n\nexport const selectFilters = state => state.filters\nexport const selectResults = state => state.dataset.values\n    .filter(sausage => sausage.name.toLowerCase().includes(state.filters.query.toLowerCase()))\n    .filter(sausage => {\n        if (sausage.tags && sausage.tags.includes(\"sausage-disqualified\")) return state.filters.includeSausageDisqualified\n        return sausage.sausages >= state.filters.minSausages && sausage.sausages <= state.filters.maxSausages\n    })\n    .filter(sausage => {\n        if (sausage.tags && sausage.tags.includes(\"will-it-blow-disqualified\")) return state.filters.includeWillItBlowDisqualified\n        if (state.filters.includeMissingWillItBlow && (! sausage.ruffalos)) return true\n        return sausage.ruffalos >= state.filters.minRuffalos && sausage.ruffalos <= state.filters.maxRuffalos\n    })\n\n// TODO if this gets more complex then add https://redux.js.org/recipes/configuring-your-store#simplifying-setup-with-redux-toolkit","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n    updateQueryFilter,\n    updateMinSausagesFilter,\n    updateMaxSausagesFilter,\n    updateMinRuffalosFilter,\n    updateMaxRuffalosFilter,\n    updateIncludeSausageDisqualifiedFilter,\n    updateIncludeWillItBlowDisqualifiedFilter,\n    updateIncludeMissingWillItBlowFilter,\n    resetFilters,\n    selectFilters\n} from '../store'\nimport TextField from '@material-ui/core/TextField';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\n\nfunction ButtonWithPopup({ renderButtonChildren, renderPopupChildren }) {\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    return (\n        <>\n            <IconButton aria-label=\"delete\" color=\"inherit\" onClick={handleClickOpen}>\n                {renderButtonChildren()}\n            </IconButton>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"draggable-dialog-title\"\n            >\n                {renderPopupChildren(handleClose)}\n            </Dialog>\n        </>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    logo: {\n        border: '2px solid #20202050'\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    title: {\n        paddingLeft: '1em',\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadContainer\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n            width: '20ch',\n        },\n    },\n    padding: {\n        height: `calc(56px + ${theme.spacing(2)}px)`\n    },\n    filterBox: {\n        padding: '20px',\n    }\n}));\n\nexport default function PrimarySearchAppBar() {\n    const classes = useStyles();\n    const filters = useSelector(selectFilters)\n    const dispatch = useDispatch()\n    const withUpdateEvent = (attr, callback) => e => callback(e.target[attr])\n    const dispathValueChangeEventFor = (actionGenerator, attr = 'value') => withUpdateEvent(attr, val => dispatch(actionGenerator(val)))\n    const dispathCheckboxChangeEventFor = (actionGenerator) => dispathValueChangeEventFor(actionGenerator, 'checked')\n\n    return (\n        <div className={classes.grow}>\n            <div className={classes.padding}/>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Avatar className={classes.logo} alt=\"Ordinary Sausage logo\" src=\"https://yt3.ggpht.com/ytc/AAUvwniLLTfPjaagIQs2TsRr4kKZAM7suk5na8_qrB2B=s176-c-k-c0x00ffffff-no-rj\" />\n\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        Ordinary Sausearch\n                    </Typography>\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{ 'aria-label': 'search' }}\n                            value={filters.query}\n                            onChange={dispathValueChangeEventFor(updateQueryFilter)}\n                        />\n                    </div>\n                    <ButtonWithPopup\n                        renderButtonChildren={() => (<FilterListIcon />)}\n                        renderPopupChildren={close => (\n                            <div classes={classes.filterBox}>\n                                <DialogTitle>Advanced filters</DialogTitle>\n                                <DialogContent>\n                                    <FormGroup column>\n                                        <TextField\n                                            label=\"Min sausage score\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            value={filters.minSausages}\n                                            onChange={dispathValueChangeEventFor(updateMinSausagesFilter)}\n                                        />\n                                        <TextField\n                                            label=\"Max sausage score\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            value={filters.maxSausages}\n                                            onChange={dispathValueChangeEventFor(updateMaxSausagesFilter)}\n                                        />\n                                        <TextField\n                                            label=\"Min Ruffalos score\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            value={filters.minRuffalos}\n                                            onChange={dispathValueChangeEventFor(updateMinRuffalosFilter)}\n                                        />\n                                        <TextField\n                                            label=\"Max Ruffalos score\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            value={filters.maxRuffalos}\n                                            onChange={dispathValueChangeEventFor(updateMaxRuffalosFilter)}\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={filters.includeSausageDisqualified}\n                                                    onChange={dispathCheckboxChangeEventFor(updateIncludeSausageDisqualifiedFilter)}\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label=\"Show disqualified sausages\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={filters.includeWillItBlowDisqualified}\n                                                    onChange={dispathCheckboxChangeEventFor(updateIncludeWillItBlowDisqualifiedFilter)}\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label=\"Show disqualified 'Will it blow?'\"\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={filters.includeMissingWillItBlow}\n                                                    onChange={dispathCheckboxChangeEventFor(updateIncludeMissingWillItBlowFilter)}\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label=\"Show missing 'Will it blow?'\"\n                                        />\n                                    </FormGroup>\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={() => {\n                                        dispatch(resetFilters)\n                                        close()\n                                    }} color=\"primary\">\n                                        Reset\n                                    </Button>\n                                    <Button onClick={close} color=\"primary\">\n                                        Close\n                                    </Button>\n                                </DialogActions>\n                            </div>)}\n                    />\n                    <div className={classes.grow} />\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import { useSelector } from 'react-redux'\nimport { selectResults } from '../store'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nexport default function SearchResults() {\n    const results = useSelector(selectResults)\n    const classes = useStyles();\n\n    return (\n\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell align=\"right\">Sausages</TableCell>\n                        <TableCell align=\"right\">Ruffalos</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {results.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.sausages}</TableCell>\n                            <TableCell align=\"right\">{row.ruffalos}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","import './App.css';\nimport SearchBar from './SearchBar'\nimport SearchResults from './SearchResults'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  return (\n    <>\n    <CssBaseline />\n    <SearchBar />\n    <Container>\n      <SearchResults />\n    </Container>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\n\nconst renderApp = () => render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n  module.hot.accept('./components/App', renderApp)\n}\n\nrenderApp()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}